name: Build Multi-Platform

on:
  workflow_dispatch:
    inputs:
      azsubsyn_version:
        description: 'Version of azsubsyn to build (without v prefix)'
        required: true
        type: string
      go_version:
        description: 'Go version to use'
        required: false
        default: '1.24.5'
        type: string
      create_release:
        description: 'Create GitHub release with artifacts'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.goos }}/${{ matrix.goarch }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-linux-arm64
          - os: ubuntu-latest
            goos: linux
            goarch: arm
            goarm: 7
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-linux-arm-v7
          
          # Windows builds
          - os: windows-latest
            goos: windows
            goarch: amd64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-windows-amd64.exe
          - os: windows-latest
            goos: windows
            goarch: arm64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-windows-arm64.exe
          - os: windows-latest
            goos: windows
            goarch: 386
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-windows-386.exe
          
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: amd64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-darwin-arm64
          
          # FreeBSD builds
          - os: ubuntu-latest
            goos: freebsd
            goarch: amd64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-freebsd-amd64
          - os: ubuntu-latest
            goos: freebsd
            goarch: arm64
            artifact_name: azsubsyn-${{ inputs.azsubsyn_version }}-freebsd-arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go_version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      if: matrix.goos == runner.os || (matrix.goos == 'linux' && runner.os == 'Linux') || (matrix.goos == 'windows' && runner.os == 'Windows') || (matrix.goos == 'darwin' && runner.os == 'macOS')
      run: go test -v ./...

    - name: Build binary (Non-Windows)
      if: matrix.goos != 'windows'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=$(git rev-parse HEAD)
        BUILD_NUMBER=${{ github.run_number }}
        go build -v -ldflags="-s -w -X 'main.Version=${{ inputs.azsubsyn_version }}' -X 'main.GitCommitSHA=${GIT_COMMIT}' -X 'main.BuildNumber=${BUILD_NUMBER}' -X 'main.BuildDate=${BUILD_DATE}'" -o azsubsyn .

    - name: Build binary (Windows)
      if: matrix.goos == 'windows'
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 0
      run: |
        $BUILD_DATE = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        $GIT_COMMIT = git rev-parse HEAD
        $BUILD_NUMBER = "${{ github.run_number }}"
        go build -v -ldflags="-s -w -X 'main.Version=${{ inputs.azsubsyn_version }}' -X 'main.GitCommitSHA=$GIT_COMMIT' -X 'main.BuildNumber=$BUILD_NUMBER' -X 'main.BuildDate=$BUILD_DATE'" -o azsubsyn.exe .
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.goos == 'windows' && 'azsubsyn.exe' || 'azsubsyn' }}
        retention-days: 30

  create-release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.create_release }}
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release
        find ./artifacts -name "azsubsyn-*" -type f -exec cp {} release/ \;
        ls -la release/

    - name: Create checksums
      run: |
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Generate release tag
      id: tag
      run: |
        TAG="release-v${{ inputs.azsubsyn_version }}"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          Automated release of azsubsyn v${{ inputs.azsubsyn_version }} built for multiple platforms.

          **Platforms included:**
          - Linux (amd64, arm64, arm-v7)
          - Windows (amd64, arm64, 386)
          - macOS (amd64, arm64)
          - FreeBSD (amd64, arm64)
          
          **Built with Go:** ${{ inputs.go_version }}
          **Commit:** ${{ github.sha }}
        files: |
          release/*
        draft: false
        prerelease: false

  summary:
    name: Build Summary
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Print build results
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Platform | Architecture | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|--------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Linux | amd64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linux | arm64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Linux | arm-v7 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows | amd64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows | arm64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Windows | 386 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS | amd64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| macOS | arm64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| FreeBSD | amd64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| FreeBSD | arm64 | ${{ needs.build.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Go Version: ${{ inputs.go_version }}" >> $GITHUB_STEP_SUMMARY
        echo "Create Release: ${{ inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
